<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Jeffrey Way]]></title>
  <link href="http://jeffreyway.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://jeffreyway.github.io/"/>
  <updated>2013-08-10T19:55:20-04:00</updated>
  <id>http://jeffreyway.github.io/</id>
  <author>
    <name><![CDATA[Jeffrey Way]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Laravel 4 Generator: Pivot]]></title>
    <link href="http://jeffreyway.github.io/blog/2013/08/02/new-laravel-4-generator-pivot/"/>
    <updated>2013-08-02T11:41:00-04:00</updated>
    <id>http://jeffreyway.github.io/blog/2013/08/02/new-laravel-4-generator-pivot</id>
    <content type="html"><![CDATA[<p>Creating joinable/pivot tables can sometimes be confusing. Should the table names be plural? In what order do we write the table names to make Laravel happy? What fields should be in the pivot table?</p>

<p>I decided to add a pivot table helper generator to my <a href="https://packagist.org/packages/way/generators">Laravel 4 Generators
package</a>. It's a cinch to
use!</p>

<!--more-->


<p><video width='640' height='400' preload='none' controls poster='http://2013-website.s3.amazonaws.com/videos/screenshots/Laravel-4-Generators-Pivot.png'><source src='http://2013-website.s3.amazonaws.com/videos/Laravel-4-Generators-Pivot.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p><a href="http://2013-website.s3.amazonaws.com/videos/Laravel-4-Generators-Pivot.mp4">Download Video</a></p>

<p><code>bash
php artisan generate:pivot tableOne tableTwo
</code></p>

<p>That's it. Behind the scenes, Laravel will figure out what the table
name should be, and will also set the necessary fields. For example, a
post can have many tags, and a tag can have many posts. So, we need a
joinable table to connect the two, when performing DB queries. Easy!</p>

<p><code>bash
php artisan generate:pivot posts tags
</code></p>

<p>It doesn't matter which order you provide the table names (or whether you pluralize them or not). The command will correctly create a <code>post_tag</code> migration that has <code>post_id</code> and <code>tag_id</code> fields.</p>

<p>```js
Schema::create('post_tag', function(Blueprint $table) {</p>

<pre><code>$table-&gt;increments('id');
$table-&gt;integer('post_id')-&gt;unsigned()-&gt;index();
$table-&gt;integer('tag_id')-&gt;unsigned()-&gt;index();
$table-&gt;foreign('post_id')-&gt;references('id')-&gt;on('posts')-&gt;onDelete('cascade');
$table-&gt;foreign('tag_id')-&gt;references('id')-&gt;on('tags')-&gt;onDelete('cascade');
</code></pre>

<p>});
```</p>

<p>Finally, simply migrate the database to create it.</p>

<p><code>bash
php artisan migrate
</code></p>

<p>Finished!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["The MVC Mindset" Teaser]]></title>
    <link href="http://jeffreyway.github.io/blog/2013/07/25/teaser-of-the-mvc-mindset/"/>
    <updated>2013-07-25T14:22:00-04:00</updated>
    <id>http://jeffreyway.github.io/blog/2013/07/25/teaser-of-the-mvc-mindset</id>
    <content type="html"><![CDATA[<p>My next course for <a href="http://tutsplus.com">Tuts+ Premium</a> will be released on the final day of July (2013). We have lots of courses that cover beginner-level PHP, and plenty more that focus on object-oriented programming and architecture. But what we didn't yet have was a course that transitions the developer from messy, muddy procedural code, over to a
more structured MVC-based architecture.</p>

<p>Here's an excerpt from the course: lesson seven.</p>

<p><video width='640' height='400' preload='none' controls poster='http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/7-Dedicated-Controllers.png'><source src='http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/7-Dedicated-Controllers.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p><a href="http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/7-Dedicated-Controllers.mp4">Download Video</a></p>

<blockquote><p>Stay tuned to <a href="http://twitter.com/tutspremium">@tutspremium</a> on Twitter
for the official release announcement next week!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AspectMock is Pretty Neat]]></title>
    <link href="http://jeffreyway.github.io/blog/2013/07/24/aspectmock-is-pretty-neat/"/>
    <updated>2013-07-24T14:48:00-04:00</updated>
    <id>http://jeffreyway.github.io/blog/2013/07/24/aspectmock-is-pretty-neat</id>
    <content type="html"><![CDATA[<p>I've been toying around with a new PHP mocking library, <a href="https://github.com/Codeception/AspectMock">AspectMock</a> (built upon Go! AOP) that takes a
different approach - one that doesn't necessarily require you to resort
to dependency injection.</p>

<p>I've only spent a matter of hours with this tool, but it just might
change the way I structure my projects in the future. I guess we'll see.
Have a watch below and decide for yourself!</p>

<p><video width='640' height='400' preload='none' controls poster='http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/AspectMock-Is-Pretty-Neat.png'><source src='http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/AspectMock-Is-Pretty-Neat.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p><a href="http://tutsplus.s3.amazonaws.com/tutspremium/Quick-Tips/AspectMock-Is-Pretty-Neat.mp4">Download Video</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Laravel Controllers]]></title>
    <link href="http://jeffreyway.github.io/blog/2013/04/20/testing-laravel-controllers/"/>
    <updated>2013-04-20T18:05:00-04:00</updated>
    <id>http://jeffreyway.github.io/blog/2013/04/20/testing-laravel-controllers</id>
    <content type="html"><![CDATA[<p>Testing controllers isn't the easiest thing in the world. Well, let me rephrase that: testing them is a cinch; what's difficult, at least at first, is determining <em>what</em> to test.</p>

<p>Should a controller test verify text on the page? Should it touch the database? Should it ensure that variables exist in the view? If this is your first hay-ride, these things can be confusing! Let me help.</p>

<blockquote><p>Controller tests should verify responses, ensure that the correct database access methods are triggered, and assert that the appropriate instance variables are sent to the view.</p></blockquote>

<!--more-->


<p>The process of testing a controller can be divided into three pieces.</p>

<ul>
<li><strong>Isolate:</strong> Mock all dependencies (perhaps excluding the <code>View</code>).</li>
<li><strong>Call:</strong> Trigger the desired controller method.</li>
<li><strong>Ensure:</strong> Perform assertions, verifying that the stage has been set properly.</li>
</ul>


<h2>The Hello World of Controller Testing</h2>

<p>The best way to learn these things is through examples. Here's the "<em>hello world</em>" of controller testing in Laravel.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
&lt;?php</p>

<p>class PostsControllerTest extends TestCase {</p>

<pre><code>public function testIndex()
{
    $this-&gt;client-&gt;request('GET', 'posts');
}
</code></pre>

<p>}
```</p>

<p>Laravel leverages a handful of Symfony's components to ease the process of testing routes and views, including HttpKernel, DomCrawler, and BrowserKit. This is why it's paramount that your PHPUnit tests inherit from, not <code>PHPUnit_Framework_TestCase</code>, but <code>TestCase</code>. Don't worry, Laravel still extends the former, but it helps setup the Laravel app for testing, as well as provides a variety of helper assertion methods that you are encouraged to use. More on that shortly.</p>

<p>In the code snippet above, we make a <code>GET</code> request to <code>/posts</code>, or <code>localhost:8000/posts</code>. Assuming that this line is added to a fresh installation of Laravel, Symfony will throw a <code>NotFoundHttpException</code>. If working along, try it out by running <code>phpunit</code> from the command line.</p>

<pre><code>$ phpunit
1) PostsControllerTest::testIndex
Symfony\Component\HttpKernel\Exception\NotFoundHttpException:
</code></pre>

<p>In <em>human-speak</em>, this essentially translates to, "<em>Hey, I tried to call that route, but you don't have anything registered, fool!</em>"</p>

<p>As you can imagine, this type of request is common enough to the point that it makes sense to provide a helper method, such as <code>$this-&gt;call()</code>. In fact, Laravel does that very thing! This means that the previous example can be refactored, like so:</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testIndex()
{</p>

<pre><code>$this-&gt;call('GET', 'posts');
</code></pre>

<p>}
```</p>

<h3>Overloading is Your Friend</h3>

<p>Though we'll stick with the base functionality in this chapter, in my personal projects, I take things a step further by allowing for such methods as <code>$this-&gt;get()</code>, <code>$this-&gt;post()</code>, etc. Thanks to PHP overloading, this only requires the addition of a single method, which you could add to <code>app/tests/TestCase.php</code>.</p>

<p>```js app/tests/TestCase.php
public function __call($method, $args)
{</p>

<pre><code>if (in_array($method, ['get', 'post', 'put', 'patch', 'delete']))
{
    return $this-&gt;call($method, $args[0]);
}

throw new BadMethodCallException;
</code></pre>

<p>}
```</p>

<p>Now, you're free to write <code>$this-&gt;get('posts')</code> and achieve the exact same result as the previous two examples. As noted above, however, let's stick with the framework's base functionality for simplicity's sake.</p>

<p>To make the test pass, we only need to prepare the proper route.</p>

<p>```js app/routes.php
&lt;?php</p>

<p>Route::get('posts', function()
{</p>

<pre><code>return 'all posts';
</code></pre>

<p>});
```</p>

<p>Running <code>phpunit</code> again will return us to green.</p>

<h2>Laravel's Helper Assertions</h2>

<p>A test that you'll find yourself writing repeatedly is one that ensures that a controller passes a particular variable to a view. For example, the <code>index</code> method of <code>PostsController</code> should pass a <code>$posts</code> variable to its associated view, right? That way, the view can filter through all posts, and display them on the page. This is an important test to write!</p>

<p>If it's that common a task, then, once again, wouldn't it make sense for Laravel to provide a helper assertion to accomplish this very thing? Of course it would. And, of course, Laravel does!</p>

<p><code>Illuminate\Foundation\Testing\TestCase</code> includes a number of methods that will drastically reduce the amount of code needed to perform basic assertions. This list includes:</p>

<ul>
<li><code>assertViewHas</code></li>
<li><code>assertResponseOk</code></li>
<li><code>assertRedirectedTo</code></li>
<li><code>assertRedirectedToRoute</code></li>
<li><code>assertRedirectedToAction</code></li>
<li><code>assertSessionHas</code></li>
<li><code>assertSessionHasErrors</code></li>
</ul>


<p>The following examples calls <code>GET /posts</code> and verifies that its views receives the variable, <code>$posts</code>.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testIndex()
{</p>

<pre><code>$this-&gt;call('GET', 'posts');

$this-&gt;assertViewHas('posts');
</code></pre>

<p>}
```</p>

<blockquote><p><strong>Tip:</strong> When it comes to formatting, I prefer to provide a line break between a test's assertion and the code that prepares the stage.</p></blockquote>

<p><code>assertViewHas</code> is simply a bit of sugar that inspects the response object - which is returned from <code>$this-&gt;call()</code> - and verifies that the data associated with the view contains a <code>posts</code> variable.</p>

<p>When inspecting the response object, you have two core choices.</p>

<ul>
<li><code>$response-&gt;getOriginalContent()</code>: Fetch the original content, or the returned <code>View</code>. Optionally, you may access the <code>original</code> property directly, rather than calling the <code>getOriginalContent</code> method.</li>
<li><code>$response-&gt;getContent()</code>: Fetch the rendered output. If a <code>View</code> instance is returned from the route, then <code>getContent()</code> will be equal to the HTML output. This can be helpful for DOM verifications, such as "<em>the view must contain this string.</em>"</li>
</ul>


<p>Let's assume that the <code>posts</code> route consists of:</p>

<p>```js app/routes.php
&lt;?php</p>

<p>Route::get('posts', function()
{</p>

<pre><code>return View::make('posts.index');
</code></pre>

<p>});
```</p>

<p>Should we run <code>phpunit</code>, it will squawk with a helpful <em>next step</em> message:</p>

<p><code>bash
1) PostsControllerTest::testIndex
Failed asserting that an array has the key 'posts'.
</code></p>

<p>To make it green, we simply fetch the posts and pass it to the view.</p>

<p>```js app/routes.php
Route::get('posts', function()
{</p>

<pre><code>$posts = Post::all();

return View::make('posts.index', ['posts', $posts]);
</code></pre>

<p>});
```</p>

<p>One thing to keep in mind is that, as the code currently stands, it only ensures that the variable, <code>$posts</code>, is passed to the view. It doesn't inspect its value. The <code>assertViewHas</code> optionally accepts a second argument to verify the value of the variable, as well as its existence.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testIndex()
{</p>

<pre><code>$this-&gt;call('GET', 'posts');

$this-&gt;assertViewHas('posts', 'foo');
</code></pre>

<p>}
```</p>

<p>With this modified code, unles the view has a variable, <code>$posts</code>, that is equal to <code>foo</code>, the test will fail. In this situation, though, it's likely that we'd rather not specify a value, but instead declare that the value be an instance of Laravel's <code>Illuminate\Database\Eloquent\Collection</code> class. How might we accomplish that? PHPUnit provides a helpful <code>assertInstanceOf</code> assertion to fill this very need!</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testIndex()
{</p>

<pre><code>$response = $this-&gt;call('GET', 'posts');

$this-&gt;assertViewHas('posts');

// getData() returns all vars attached to the response.
$posts = $response-&gt;original-&gt;getData()['posts'];

$this-&gt;assertInstanceOf('Illuminate\Database\Eloquent\Collection', $posts);
</code></pre>

<p>}
```</p>

<p>With this modification, we've declared that the controller <strong>must</strong> pass <code>$posts</code> - an instance of <code>Illuminate\Database\Eloquent\Collection</code> - to the view. Excellent.</p>

<h2>Mocking the Database</h2>

<p>There's one glaring problem with our tests so far. Did you catch it?</p>

<blockquote><p>For each test, a SQL query is being executed on the database. Though this is useful for certain kinds of testing (acceptance, integration), for basic controller testing, it will only serve to decrease performance.</p></blockquote>

<p>I've drilled this into your skull multiple times at this point. We're not interested in testing Eloquent's ability to fetch records from a database. It has its own tests. Taylor knows it works! Let's not waste time and processing power repeating those same tests.</p>

<p>Instead, it's best to mock the database, and merely verify that the appropriate methods are called with the correct arguments. Or, in other words, we want to ensure that <code>Post::all()</code> never fires and hits the database. We know that works, so it doesn't require testing.</p>

<p>This section will depend heavily on the Mockery library. Please review that chapter <a href="http://leanpub.com/laravel-testing-decoded">from my book</a>, if you're not yet familiar with it.</p>

<h3>Required Refactoring</h3>

<p>Unfortunately, so far, we've structured the code in a way that makes it virtually impossible to test.</p>

<p>```js app/routes.php
Route::get('posts', function()
{</p>

<pre><code>// Ouch. We can't test this!!
$posts = Post::all();

return View::make('posts.index')
    -&gt;with('posts', $posts);
</code></pre>

<p>});
```</p>

<p>This is precisely why it's considered bad practice to nest Eloquent calls into your controllers. Don't confuse Laravel's facades, which are testable and can be swapped out with mocks (<code>Queue::shouldReceive()</code>), with your Eloquent models. The solution is to inject the database layer into the controller through the constructor. This requires some refactoring.</p>

<blockquote><p><strong>Warning:</strong> Storing logic within route callbacks is useful for small projects and APIs, but they make testing incredibly difficult. For applications of any considerable size, use controllers.</p></blockquote>

<p>Let's register a new resource by replacing   the <code>posts</code> route with:</p>

<p><code>js app/routes.php
Route::resource('posts', 'PostsController');
</code></p>

<p>...and create the necessary resourceful controller with Artisan.</p>

<p><code>bash
$ php artisan controller:make PostsController
Controller created successfully!
</code></p>

<p>Now, rather than referencing the <code>Post</code> model directly, we'll inject it into the controller's constructor. Here's a condensed example that omits all restful methods except the one that we're currently interested in testing.</p>

<p>```js app/controllers/PostsController.php
&lt;?php</p>

<p>class PostsController extends BaseController {</p>

<p>  protected $post;</p>

<p>  public function __construct(Post $post)
  {</p>

<pre><code>  $this-&gt;post = $post;
</code></pre>

<p>  }</p>

<p>  public function index()
  {</p>

<pre><code>  $posts = $this-&gt;post-&gt;all();

  return View::make('posts.index')
      -&gt;with('posts', $posts);
</code></pre>

<p>  }</p>

<p>}
```</p>

<blockquote><p>Please note that it's a better idea to typehint an interface, rather than reference the Eloquent model, itself. But, one thing at a time! Let's work up to that.</p></blockquote>

<p>This is a significantly better way to structure the code. Because the model is now injected, we have the ability to swap it out with a mocked version for testing. Here's an example of doing just that:</p>

<p>```js app/tests/controllers/PostsControllerTest.php
&lt;?php</p>

<p>class PostsControllerTest extends TestCase {</p>

<pre><code>public function __construct()
{
    // We have no interest in testing Eloquent
    $this-&gt;mock = Mockery::mock('Eloquent', 'Post');
}

public function tearDown()
{
    Mockery::close();
}

public function testIndex()
{
    $this-&gt;mock
         -&gt;shouldReceive('all')
         -&gt;once()
         -&gt;andReturn('foo');

    $this-&gt;app-&gt;instance('Post', $this-&gt;mock);

    $this-&gt;call('GET', 'posts');

    $this-&gt;assertViewHas('posts');
}
</code></pre>

<p>}
```</p>

<p>The key benfit to this restructuring is that, now, the database will never needlessly be hit. Instead, using Mockery, we merely verify that the <code>all</code> method is triggered on the model.</p>

<p>```js
$this->mock</p>

<pre><code> -&gt;shouldReceive('all')
 -&gt;once();
</code></pre>

<p>```</p>

<p>Unfortunately, if you choose to forego coding to an interface, and instead inject the <code>Post</code> model into the controller, a bit of trickery has to be used in order to get around Eloquent's use of statics, which can clash with Mockery. This is why we hijack both the <code>Post</code> and <code>Eloquent</code> classes within the test's constructor, before the official versions have been loaded. This way, we have a clean slate to declare any expectations. The downside, of course, is that we can't default to any existing methods, through the use of Mockery methods, like <code>makePartial()</code>.</p>

<h3>The IoC Container</h3>

<p>Laravel's IoC container drastically eases the process of injecting dependencies into your classes. Each time a controller is requested, it is resolved out of the IoC container. As such, when we need to declare that a mock version of <code>Post</code> should be used for testing, we only need to provide Laravel with the instance of <code>Post</code> that should be used.</p>

<p><code>js
$this-&gt;app-&gt;instance('Post', $this-&gt;mock);
</code></p>

<blockquote><p>Think of this code as saying, "<em>Hey Laravel, when you need an instance of <code>Post</code>, I want you to use my mocked version.</em>" Because the app extends the <code>Container</code> we have access to all IoC methods directly off of it.</p></blockquote>

<p>Upon instantiation of the controller, Laravel leverages the power of PHP reflection to read the typehint and inject the dependency for you. That's right; you don't have to write a single binding to allow for this; it's automated!</p>

<h2>Redirections</h2>

<p>Another common expectation that you'll find yourself writing is one that ensures that the user is redirected to the proper location, perhaps upon adding a new post to the database. How might we accomplish this?</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testStore()
{</p>

<pre><code>$this-&gt;mock
     -&gt;shouldReceive('create')
     -&gt;once();

$this-&gt;app-&gt;instance('Post', $this-&gt;mock);

$this-&gt;call('POST', 'posts');

$this-&gt;assertRedirectedToRoute('posts.index');
</code></pre>

<p>}
```</p>

<p>Assuming that we're following a restful flavor, to add a new post, we'd <code>POST</code> to the collection, or <code>posts</code> (don't confuse the <code>POST</code> request method with the resource name, which just happens to have the same name).</p>

<p><code>js
$this-&gt;call('POST', 'posts');
</code></p>

<p>Then, we only need to leverage another of Laravel's helper assertions, <code>assertRedirectedToRoute</code>.</p>

<blockquote><p><strong>Tip:</strong> When a resource is registered with Laravel (<code>Route::resource()</code>), the framework will automatically register the necessary named routes. Run <code>php artisan routes</code> if you ever forget what these names are.</p></blockquote>

<p>You might prefer to also ensure that the <code>$_POST</code> superglobal is passed to the <code>create</code> method. Even though we aren't physically submitting a form, we can still allow for this, via the <code>Input::replace()</code> method, which allows us to "stub" this array. Here's the modified test, which uses Mockery's <code>with()</code> method to verify the arguments passed to the method referenced by <code>shouldReceive</code>.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testStore()
{</p>

<pre><code>Input::replace($input = ['title' =&gt; 'My Title']);

$this-&gt;mock
     -&gt;shouldReceive('create')
     -&gt;once()
     -&gt;with($input);

$this-&gt;app-&gt;instance('Post', $this-&gt;mock);

$this-&gt;call('POST', 'posts');

$this-&gt;assertRedirectedToRoute('posts.index');
</code></pre>

<p>}
```</p>

<h2>Paths</h2>

<p>One thing that we haven't considered in this test is validation. There should be two separate paths through the <code>store</code> method, dependent upon whether the validation passes:</p>

<ol>
<li>Redirect back to the "Create Post" form, and display the form validation errors.</li>
<li>Redirect to the collection, or the named route, <code>posts.index</code>.</li>
</ol>


<blockquote><p>As a best practice, each test should represent but one path through your code.</p></blockquote>

<p>This first path will be for failed validation.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testStoreFails()
{</p>

<pre><code>// Set stage for a failed validation
Input::replace(['title' =&gt; '']);

$this-&gt;app-&gt;instance('Post', $this-&gt;mock);

$this-&gt;call('POST', 'posts');

// Failed validation should reload the create form
$this-&gt;assertRedirectedToRoute('posts.create');

// The errors should be sent to the view
$this-&gt;assertSessionHasErrors(['title']);
</code></pre>

<p>}
```</p>

<p>The code snippet above explicitly declares which errors should exist. Alternatively, you may omit the argument to <code>assertSessionHasErrors</code>, in which case it will merely verify that a message bag has been flashed (in translation, your Redirection includes <code>withErrors($errors)</code>).</p>

<p>Now for the test that handles successful validation.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testStoreSuccess()
{</p>

<pre><code>// Set stage for successful validation
Input::replace(['title' =&gt; 'Foo Title']);

$this-&gt;mock
     -&gt;shouldReceive('create')
     -&gt;once();

$this-&gt;app-&gt;instance('Post', $this-&gt;mock);

$this-&gt;call('POST', 'posts');

// Should redirect to collection, with a success flash message
$this-&gt;assertRedirectedToRoute('posts.index', ['flash']);
</code></pre>

<p>}
```</p>

<p>The production code for these two tests might look like:</p>

<p>```js app/controllers/PostsController.php
public function store()
{</p>

<pre><code>$input = Input::all();

// We'll run validation in the controller for convenience
// You should export this to the model, or a service
$v = Validator::make($input, ['title' =&gt; 'required']);

if ($v-&gt;fails())
{
    return Redirect::route('posts.create')
        -&gt;withInput()
        -&gt;withErrors($v-&gt;messages());
}

$this-&gt;post-&gt;create($input);

return Redirect::route('posts.index')
    -&gt;with('flash', 'Your post has been created!');
</code></pre>

<p>}
```</p>

<p>Notice how the <code>Validator</code> is nested directly in the controller? Generally, I'd recommend that you abstract this away to a service. That way, you can test your validation in isolation from any controllers or  routes. Nonetheless, let's leave things as they are for simplicity's sake. One thing to keep in mind is that we aren't mocking the <code>Validator</code>, though you certainly could do so. Because this class is a facade, it can easily be swapped out with a mocked version, via the Facade's <code>shouldReceive</code> method, without us needing to worry about injecting an instance through the constructor. Win!</p>

<p>```js app/controllers/PostsController.php
Validator::shouldReceive('make')</p>

<pre><code>-&gt;once()
-&gt;andReturn(Mockery::mock(['fails' =&gt; 'true']));
</code></pre>

<p>```</p>

<p>From time to time, you'll find that a method that needs to be mocked should return an object, itself. Luckily, with Mockery, this is a piece of cake: we only need to create an anonymous mock, and pass an array, which signals the method name and response value, respectively. As such:</p>

<p><code>js
Mockery::mock(['fails' =&gt; 'true'])
</code></p>

<p>will prepare an object, containing a <code>fails()</code> method that returns <code>true</code>.</p>

<h2>Repositories</h2>

<p>To allow for optimal flexibility, rather than creating a direct link between your controller and an ORM, like Eloquent, it's better to code to an interface. The considerable advantage to this approach is that, should you perhaps need to swap out Eloquent for, say, Mongo or Redis, doing so literally requires the modification of a single line. Even better, the controller doesn't ever need to be touched.</p>

<blockquote><p>Repositories represent the data access layer of your application.</p></blockquote>

<p>What might an interface for managing the database layer of a <code>Post</code> look like? This should get you started.</p>

<p>```js app/repositories/PostRepositoryInterface.php
&lt;?php namespace Repositories;</p>

<p>interface PostRepositoryInterface {</p>

<pre><code>public function all();

public function find($id);

public function create($input);
</code></pre>

<p>}
```</p>

<p>This can certainly be extended, but we've added the bare minimum methods for the demo: <code>all</code>, <code>find</code>, and <code>create</code>. Notice that the repository interfaces are being stored within <code>app/repositories</code>. Because this folder is not autoloaded by default, we need to update the <code>composer.json</code> file for the application to reference it.</p>

<p>```js composer.json
"autoload": {
  "classmap": [</p>

<pre><code>// ....
"app/repositories"
</code></pre>

<p>  ]
}
```</p>

<blockquote><p>When a new class is added to this directory, don't forget to <code>composer dump-autoload -o</code>. The <code>-o</code>, (<em>optimize</em>) flag is optional, but should always be used, as a best practice.</p></blockquote>

<p>If you attempt to inject this interface into your controller, Laravel will snap at you. Go ahead; try it out and see. Here's the modified <code>PostController</code>, which has been updated to inject an interface, rather than the <code>Post</code> Eloquent model.</p>

<p>```js app/controllers/PostsController.php
&lt;?php</p>

<p>use Repositories\PostRepositoryInterface as Post;</p>

<p>class PostsController extends BaseController {</p>

<pre><code>protected $post;

public function __construct(Post $post)
{
    $this-&gt;post = $post;
}

public function index()
{
    $posts = $this-&gt;post-&gt;all();

    return View::make('posts.index', ['posts' =&gt; $posts]);
}
</code></pre>

<p>}
```</p>

<p>If you run the server and view the output, you'll be met with the dreaded (but beautiful) Whoops error page, declaring that "<em>PostRepositoryInterface is not instantiable.</em>"</p>

<p><img src="/images/testing-controllers/instantiable.png"></p>

<p>If you think about it, of course the framework is squawking! Laravel is smart, but it's not a mind reader. It needs to be told which implementation of the interface should be used within the controller.</p>

<p>For now, let's add this binding to <code>app/routes.php</code>. Later, we'll instead make use of service providers to store this sort of logic.</p>

<p>```js app/routes.php
App::bind(</p>

<pre><code>'Repositories\PostRepositoryInterface',
'Repositories\EloquentPostRepository'
</code></pre>

<p>);
<code>``
Verbalize this function call as, "*Laravel, baby, when you need an instance of</code>PostRepositoryInterface<code>, I want you to use</code>EloquentPostRepository`.*"</p>

<p><code>app/repositories/EloquentPostRepository</code> will simply be a wrapper around Eloquent that implements <code>PostRepositoryInterface</code>. This way, we're not restricting the API (and every other implementation) to Eloquent's interpretation; we can name the methods however we wish.</p>

<p>```js app/repositories/EloquentPostRepository.php
&lt;?php namespace Repositories;</p>

<p>use Repositories\PostRepositoryInterface;
use Post;</p>

<p>class EloquentPostRepository implements PostRepositoryInterface {</p>

<pre><code>public function all()
{
    return Post::all();
}

public function find($id)
{
    return Post::find($id);
}

public function create($input)
{
    return Post::create($input);
}
</code></pre>

<p>}
```</p>

<blockquote><p>Some might argue that the <code>Post</code> model should be injected into this implementation for testability purposes. If you agree, simply inject it through the constructor, per usual.</p></blockquote>

<p>That's all it should take! Refresh the browser, and things should be back to normal. Only, now, your application is far better structured, and the controller is no longer linked to Eloquent.</p>

<p>Let's imagine that, a few months from now, your boss informs you that you need to swap Eloquent out with Redis. Well, because you've structured your application in this future-proof way, you only need to create the new <code>app/repositories/RedisPostRepository</code> implementation:</p>

<p>```js app/repositories/RedisPostRepository.php
&lt;?php namespace Repositories;</p>

<p>use Repositories\PostRepositoryInterface;</p>

<p>class RedisPostRepository implements PostRepositoryInterface {</p>

<pre><code>public function all()
{
    // return all with Redis
}

public function find($id)
{
    // return find one with Redis
}

public function create($input)
{
    // return create with Redis
}
</code></pre>

<p>}
```</p>

<p>And update the binding:</p>

<p>```js app/routes.php
App::bind(</p>

<pre><code>'Repositories\PostRepositoryInterface',
'Repositories\RedisPostRepository'
</code></pre>

<p>);
```</p>

<p>Instantly, you're now leveraging Redis in your controller. Notice how <code>app/controllers/PostsController.php</code> was never touched? That's the beauty of it!</p>

<h2>Structure</h2>

<p>So far in this lesson, our organization has been a bit lacking. IoC bindings in the <code>routes.php</code> file? All repositories grouped together in one directory? Sure, that may work in the beginning, but, very quickly, it'll become apparent that this doesn't scale.</p>

<p>In the final section of this article, we'll PSR-ify our code, and leverage service providers to register any applicable bindings.</p>

<blockquote><p>PSR-0 defines the mandatory requirements that must be adhered to for autoloader interoperability.</p></blockquote>

<p>A PSR-0 loader may be registered with Composer, via the <code>psr-0</code> object.</p>

<p>```js composer.json
"autoload": {</p>

<pre><code>"psr-0": {
    "Way": "app/lib/"
}
</code></pre>

<p>}
```</p>

<p>The syntax can be confusing at first. It certainly was for me. An easy way to decipher <code>"Way": "app/lib/"</code> is to think to yourself, "<em>The base folder for the <code>Way</code> namespace is located in <code>app/lib</code>.</em>" Of course, replace my last name with the name of your project. The directory structure to match this would be:</p>

<ul>
<li>app/

<ul>
<li>lib/

<ul>
<li>Way/</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Next, rather than grouping all repositories into a <code>repositories</code> directory, a more elegant approach might be to categorize them into multiple directories, like so:</p>

<ul>
<li>app/

<ul>
<li>lib/

<ul>
<li>Way/

<ul>
<li>Storage/

<ul>
<li>Post/

<ul>
<li>PostRepositoryInterface.php</li>
<li>EloquentPostRepository.php</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>It's vital that we adhere to this naming and folder convention, if we want the autoloading to work as expected. The only remaining thing to do is update the namespaces for <code>PostRepositoryInterface</code> and <code>EloquentPostRepository</code>.</p>

<p>```js app/lib/Way/Storage/Post/PostRepositoryInterface.php
&lt;?php namespace Way\Storage\Post;</p>

<p>interface PostRepositoryInterface {</p>

<pre><code>public function all();

public function find($id);

public function create($input);
</code></pre>

<p>}
```</p>

<p>```js app/lib/Way/Storage/Post/EloquentPostRepository.php
&lt;?php namespace Way\Storage\Post;</p>

<p>use Post;</p>

<p>class EloquentPostRepository implements PostRepositoryInterface {</p>

<pre><code>public function all()
{
    return Post::all();
}

public function find($id)
{
    return Post::find($id);
}

public function create($input)
{
    return Post::create($input);
}
</code></pre>

<p>}
```</p>

<p>There we go; that's much cleaner. But what about those pesky bindings? The routes file may be a convenient place to experiment, but it makes little sense to store them there permanently. Instead, we'll use service providers.</p>

<blockquote><p>Service providers are nothing more than bootstrap classes that can be used to do anything you wish: register a binding, hook into an event, import a routes file, etc.</p></blockquote>

<p>A service provider's <code>register()</code> will be triggered automatically by Laravel.</p>

<p>```js app/lib/Way/Storage/StorageServiceProvider.php
&lt;?php namespace Way\Storage;</p>

<p>use Illuminate\Support\ServiceProvider;</p>

<p>class StorageServiceProvider extends ServiceProvider {</p>

<pre><code>// Triggered automatically by Laravel
public function register()
{
    $this-&gt;app-&gt;bind(
      'Way\Storage\Post\PostRepositoryInterface',
      'Way\Storage\Post\EloquentPostRepository'
    );
}
</code></pre>

<p>}
```</p>

<p>To make this file known to Laravel, you only need to include it in <code>app/config/app.php</code>, within the <code>providers</code> array.</p>

<p>```js app/config/app.php
'providers' => array(</p>

<pre><code>'Illuminate\Foundation\Providers\ArtisanServiceProvider',
'Illuminate\Auth\AuthServiceProvider',
// ...
'Way\Storage\StorageServiceProvider'
</code></pre>

<p>)
```</p>

<p>Good; now we have a dedicated file for registering new bindings.</p>

<h3>Updating the Tests</h3>

<p>With our new structure in place, rather than mocking the Eloquent model, itself, we can instead mock <code>PostRepositoryInterface</code>. Here's an example of one such test:</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function testIndex()
{</p>

<pre><code>$mock = Mockery::mock('Way\Storage\Post\PostRepositoryInterface');
$mock-&gt;shouldReceive('all')-&gt;once();

$this-&gt;app-&gt;instance('Way\Storage\Post\PostRepositoryInterface', $mock);

$this-&gt;call('GET', 'posts');

$this-&gt;assertViewHas('posts');
</code></pre>

<p>}
```</p>

<p>However, we can improve this. It stands to reason that every method within <code>PostsControllerTest</code> will require a mocked version of the repository. As such, it's better to extract some of this prep work into its own method, like so:</p>

<p>```js app/tests/controllers/PostsControllerTest.php
public function setUp()
{</p>

<pre><code>parent::setUp();

$this-&gt;mock('Way\Storage\Post\PostRepositoryInterface');
</code></pre>

<p>}</p>

<p>public function mock($class)
{</p>

<pre><code>$mock = Mockery::mock($class);

$this-&gt;app-&gt;instance($class, $mock);

return $mock;
</code></pre>

<p>}</p>

<p>public function testIndex()
{</p>

<pre><code>$this-&gt;mock-&gt;shouldReceive('all')-&gt;once();

$this-&gt;call('GET', 'posts');

$this-&gt;assertViewHas('posts');
</code></pre>

<p>}
```</p>

<p>Not bad, ay?</p>

<p>Now, if you want to be super-fly, and are willing to add a touch of test logic to your production code, you could even perform your mocking within the Eloquent model! This would allow for:</p>

<p><code>js
Post::shouldReceive('all')-&gt;once();
</code></p>

<p>Behind the scenes, this would mock <code>PostRepositoryInterface</code>, and update the IoC binding. You can't get much more readable than that!</p>

<p>Allowing for this syntax only requires you to update the <code>Post</code> model, or, better, a <code>BaseModel</code> that all of the Eloquent models extend. Here's an example of the former:</p>

<p>```js app/models/Post.php
&lt;?php</p>

<p>class Post extends Eloquent {</p>

<pre><code>public static function shouldReceive()
{
    $class = get_called_class();
    $repo = "Way\\Storage\\{$class}\\{$class}RepositoryInterface";
    $mock = Mockery::mock($repo);

    App::instance($repo, $mock);

    return call_user_func_array([$mock, 'shouldReceive'], func_get_args());
}
</code></pre>

<p>}
```</p>

<p>If you can manage the inner "<em>Should I be embedding test logic into production code</em>" battle, you'll find that this allows for significantly more readable tests.</p>

<p>```js app/tests/controllers/PostsControllerTest.php
&lt;?php</p>

<p>class PostsControllerTest extends TestCase {</p>

<pre><code>public function tearDown()
{
    Mockery::close();
}

public function testIndex()
{
    Post::shouldReceive('all')-&gt;once();

    $this-&gt;call('GET', 'posts');

    $this-&gt;assertViewHas('posts');
}

public function testStoreFails()
{
    Input::replace($input = ['title' =&gt; '']);

    $this-&gt;call('POST', 'posts');

    $this-&gt;assertRedirectedToRoute('posts.create');
    $this-&gt;assertSessionHasErrors();
}

public function testStoreSuccess()
{
    Input::replace($input = ['title' =&gt; 'Foo Title']);

    Post::shouldReceive('create')-&gt;once();

    $this-&gt;call('POST', 'posts');

    $this-&gt;assertRedirectedToRoute('posts.index', ['flash']);
}
</code></pre>

<p>}
```</p>

<p>It feels good, doesn't it? Hopefully, this article hasn't been too overwhelming. The key is to learn how to organize your repositories in such a way to make them as easy as possible to mock and inject into your controllers. As a result of that effort, your tests will be lightning fast!</p>

<blockquote><p>This article is an excerpt from my book, <a href="https://leanpub.com/laravel-testing-decoded">Laravel Testing Decoded</a>. Give it a read if you'd like to dig more into these topics!</p></blockquote>
]]></content>
  </entry>
  
</feed>
